${ }的用法
假設我們定義了一個變量為： 
file=/dir1/dir2/dir3/my.file.txt 
我們可以用 ${ } 分別替換獲得不同的值： 
${file#*/}：拿掉第一條 / 及其左邊的字串：dir1/dir2/dir3/my.file.txt 
${file##*/}：拿掉最後一條 / 及其左邊的字串：my.file.txt 
${file#*.}：拿掉第一個 . 及其左邊的字串：file.txt 
${file##*.}：拿掉最後一個 . 及其左邊的字串：txt 
${file%/*}：拿掉最後條 / 及其右邊的字串：/dir1/dir2/dir3 
${file%%/*}：拿掉第一條 / 及其右邊的字串：(空值) 
${file%.*}：拿掉最後一個 . 及其右邊的字串：/dir1/dir2/dir3/my.file 
${file%%.*}：拿掉第一個 . 及其右邊的字串：/dir1/dir2/dir3/my 
記憶的方法為： 
# 是去掉左邊(在鑑盤上 # 在 $ 之左邊) 
% 是去掉右邊(在鑑盤上 % 在 $ 之右邊) 
單一符號是最小匹配﹔兩個符號是最大匹配。

${file:0:5}：提取最左邊的 5 個字?：/dir1 
${file:5:5}：提取第 5 個字?右邊的連續 5 個字?：/dir2 

我們也可以對變量值裡的字串作替換： 
${file/dir/path}：將第一個 dir 提換為 path：/path1/dir2/dir3/my.file.txt 
${file//dir/path}：將全部 dir 提換為 path：/path1/path2/path3/my.file.txt 

利用 ${ } 還可針對不同的變數狀態賦值(沒設定、空值、非空值)： 
${file-my.file.txt} ：假如 $file 為空值，則使用 my.file.txt 作默認值。(保留沒設定及非空值) 
${file:-my.file.txt} ：假如 $file 沒有設定或為空值，則使用 my.file.txt 作默認值。 (保留非空值) 
${file+my.file.txt} ：不管 $file 為何值，均使用 my.file.txt 作默認值。 (不保留任何值) 
${file:+my.file.txt} ：除非 $file 為空值，否則使用 my.file.txt 作默認值。 (保留空值) 
${file=my.file.txt} ：若 $file 沒設定，則使用 my.file.txt 作默認值，同時將 $file 定義為非空值。 (保留空值及非空值) 
${file:=my.file.txt} ：若 $file 沒設定或為空值，則使用 my.file.txt 作默認值，同時將 $file 定義為非空值。 (保留非空值) 
${file?my.file.txt} ：若 $file 沒設定，則將 my.file.txt 輸出至 STDERR。 (保留空值及非空值)) 
${file:?my.file.txt} ：若 $file 沒設定或為空值，則將 my.file.txt 輸出至 STDERR。 (保留非空值) 

還有哦，${#var} 可計算出變量值的長度： 
${#file} 可得到 27 ，因為 /dir1/dir2/dir3/my.file.txt 剛好是 27 個字?... 

接下?恚贋榇蠹医樯砸幌 bash 的組數(array)處理方法。 
一般而言，A="a b c def" 這樣的變量只是將 $A 替換為一個單一的字串， 
但是改為 A=(a b c def) ，則是將 $A 定義為組數... 
bash 的組數替換方法可參考如下方法： 
${A[@]} 或 ${A

} 可得到 a b c def (全部組數) 
${A[0]} 可得到 a (第一個組數)，${A[1]} 則為第二個組數... 
${#A[@]} 或 ${#A
} 可得到 4 (全部組數數量) 
${#A[0]} 可得到 1 (即第一個組數(a)的長度)，${A[3]} 可得到 3 (第一個組數(def)的長度) 
A[3]=xyz 則是將第 4 個組數重新定義為 xyz ... 


整数比较
-eq     等于,如:if ["$a" -eq "$b" ]
-ne     不等于,如:if ["$a" -ne "$b" ]
-gt     大于,如:if ["$a" -gt "$b" ]
-ge    大于等于,如:if ["$a" -ge "$b" ]
-lt      小于,如:if ["$a" -lt "$b" ]
-le      小于等于,如:if ["$a" -le "$b" ]
<  小于(需要双括号),如:(("$a" < "$b"))
<=  小于等于(需要双括号),如:(("$a" <= "$b"))
>  大于(需要双括号),如:(("$a" > "$b"))
>=  大于等于(需要双括号),如:(("$a" >= "$b"))
另外：$?是shell变量,表示"最后一次执行命令"的退出状态.0为成功,非0为失败.



-s file　　　　　文件大小非0时为真
[ -f "somefile" ] ：判断是否是一个文件

[ -x "/bin/ls" ] ：判断/bin/ls是否存在并有可执行权限

[ -n "$var" ] ：判断$var变量是否有值

[ "$a" = "$b" ] ：判断$a和$b是否相等          

-r file　　　　　用户可读为真

-w file　　　　　用户可写为真

-x file　　　　　用户可执行为真

-f file　　　　　文件为正规文件为真

-d file　　　　　文件为目录为真

-c file　　　　　文件为字符特殊文件为真

-b file　　　　　文件为块特殊文件为真

-s file　　　　　文件大小非0时为真

-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真




shell中$0,$?,$!等的特殊用法 
$$
Shell本身的PID（ProcessID）
$!
Shell最后运行的后台Process的PID
$?
最后运行的命令的结束代码（返回值）
$-
使用Set命令设定的Flag一览
$*
所有参数列表。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$@
所有参数列表。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$#
添加到Shell的参数个数
$0
Shell本身的文件名
$1～$n
添加到Shell的各参数值。$1是第1参数、$2是第2参数…。
我们先写一个简单的脚本，执行以后再解释各个变量的意义
# touch variable
# vi variable
脚本内容如下：
#!/bin/sh
echo "number:$#"
echo "scname:$0"
echo "first :$1"
echo "second:$2"
echo "argume:$@"
保存退出
赋予脚本执行权限
# chmod +x variable
执行脚本
# ./variable aa bb
number:2
scname:./variable
first: aa
second:bb
argume:aa bb
通过显示结果可以看到：
$# 是传给脚本的参数个数
$0 是脚本本身的名字
$1是传递给该shell脚本的第一个参数
$2是传递给该shell脚本的第二个参数
$@ 是传给脚本的所有参数的列表